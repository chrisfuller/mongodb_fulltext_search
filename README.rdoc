= mongodb_fulltext_search

A gem that adds fulltext search capability to Mongoid[http://mongoid.org/] or MongoMapper[http://mongomapper.com/] documents. The MongoDB[http://mongodb.org/] aggregation framework is utilized to perform searches.

== Prerequisites

Rails must be configured to use either Mongoid or MongoMapper and MongoDB[http://mongodb.org/] version 2.1.0 (or higher) is required.

Please get in touch if you’d like to see added support for another MongoDB object mapper (ODM).

== Installation

  $ gem install mongodb_fulltext_search

== Rails Configuration

Add to Gemfile:

  gem 'mongodb_fulltext_search'

== Indexes

This gem implements indexes specifically for the fulltext search.

The fulltext indexes are maintained automatically via the +before_save+ and +before_destroy+ callbacks on models, however you MUST run the rake task (below) to rebuild the indexes any time your models change.

The indexes are implemented as MongoDB collections (since MongoDB's built-in indexes do not currently support fulltext search), therefore the fulltext indexes are actually "index collections". The "index collections" are stored in the same database that the models are persisted to.

The "index collections" will benefit from using MongoDB indexes themselves. To enable MongoDB indexes on the "index collections", simply use the normal rake command <tt>rake db:mongoid:create_indexes</tt> (or for development or testing, you can enable auto-creation of indexes if your ODM supports it).

For the remainder of the documentation, the "index collections" will simply be referred to as "indexes".

== Examples

Mongoid example:

  class Widget
    
    include Mongoid::Document
    include Mongoid::FullTextSearch
    
    field :name, :type => String
    field :desc, :type => String
    
    fulltext_search_in :desc
    
  end

MongoMapper example:

  class Widget
    
    include MongoMapper::Document
    include MongoMapper::FullTextSearch
    
    key :name, String
    key :desc, String
    
    fulltext_search_in :desc
  
  end

Or index multiple attributes together:

  fulltext_search_in :name, :desc

Or index virtual attributes:

  fulltext_search_in :name_and_desc
  
  def name_and_desc
    [ name, desc ].join ' '
  end

== Performing Searches

In controllers, perform searches with:

  @widgets = Widget.fulltext_search params[:search_query]

When fulltext searches are performed, a +fulltext_search_score+ attribute is added to the models:

  @widgets.each { |widget| widget.fulltext_search_score }

== Multiple Indexes

It is possible to create more than one index on a model:

  fulltext_search_in :name, :index => 'name_index'
  fulltext_search_in :desc, :index => 'desc_index'

In this case, you MUST specify an index when performing a search:

  @widgets = Widget.fulltext_search params[:search_query], :index => 'name_index'

or

  @widgets = Widget.fulltext_search params[:search_query], :index => 'desc_index'

NOTE: An +ArgumentError+ exception will be raised if multiple indexes exist but an index is not specified.

== Options

By default, results are limited to 20 models but you can specify a limit when searching:

  @widgets = Widget.fulltext_search params[:search_query], :limit => 10

And you can also specify an offset:

  @widgets = Widget.fulltext_search params[:search_query], :offset => 20

To return document identifiers and search scores as a +Hash+:

  @scores = Widget.fulltext_search params[:search_query], :return_scores => true
  @scores.each { |id, score| id + ': ' + score }

== Normalization

Strings are normalized using <tt>normalize(:kd)</tt> (for queries and also indexes), so for example +resumé+ and +resume+ would match.

== Stop Words

Stop words (i.e. blacklisted words) can be specified in a YAML config file.

To generate a config file with a default set of stop words:

  $ rails g mongodb_fulltext_search:config

The default stop words are:

  a, an, and, are, as, at, be, but, by, for, if, in, into, is, it, no, not, of, on, or, such, that, the, their, then, there, these, they, this, to, was, will, with

== Rake Tasks

To rebuild indexes for all models:

  $ rake db:mongo:rebuild_fulltext_search_indexes

To rebuild indexes for one model:

  $ rake db:mongo:rebuild_fulltext_search_indexes[Widget]

NOTE: The indexes are maintained automatically via the +before_save+ and +before_destroy+ callbacks on models, however you MUST run this rake task any time your models change.

== To Do

* Filtered indexes
* Shared indexes

== Copyright

Copyright (c) 2012 Christopher Fuller. See MIT-LICENSE[http://github.com/chrisfuller/mongodb_fulltext_search/blob/master/MIT-LICENSE] for details.
